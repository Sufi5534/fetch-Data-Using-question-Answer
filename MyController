package com.wheeboxproject.controller;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.catalina.connector.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.wheebox.importExcel.Data_import_to_excel;
import com.wheeboxproject.model.te_ques_bank;
import com.wheeboxproject.model.te_section_que;
import com.wheeboxproject.model.wet_user_response;
import com.wheeboxproject.service.WetUserService;

@Controller
public class MainController {

	HashMap<Integer, Integer> Assign_Q = null;
	HashMap<Integer, Integer> Attept_Q = null;
	HashMap<Integer, Integer> correct_Q = null;
	HashMap<Integer, Integer> wrong_Q = null;
	HashMap<Integer, Integer> Not_Attempt = null;
	HashMap<Integer, HashMap<String, Integer>> outerMap = null;
	HashMap<String, Integer> innerMap = null;
	
	@Autowired
	public WetUserService wetuserservice;
	
	public ArrayList<Integer> quesId = new ArrayList<Integer>();
	public ArrayList<String> Qans = new ArrayList<String>();
	HashMap<Integer, String> Q_Text = null;

	@RequestMapping("/")
	public String main() {
		return "index";
	}

	@RequestMapping(path = "/testId")
	public ModelAndView made(HttpServletRequest req) {
		ModelAndView model = new ModelAndView("/record");
		int testno = Integer.parseInt(req.getParameter("search"));
		
		@SuppressWarnings("unchecked")
		List<te_section_que> section_ques = this.wetuserservice.data(testno);
		if (!section_ques.isEmpty()) {
			String quesIds = "";
			for (te_section_que i : section_ques) {
				quesIds = quesIds + i.getQues();
				quesIds = quesIds + ",";
			}
		
			quesIds = quesIds.substring(0, quesIds.length() - 1);
			showData(quesIds, testno);

			model.addObject("AteemptQuestion", Attept_Q);
			model.addObject("CorrectQuestion", correct_Q);
			model.addObject("WrongQuestion", wrong_Q);
			model.addObject("AssignQuestion", Assign_Q);
            model.addObject("NotAttemptQuestion",Not_Attempt);
            model.addObject("UserOption",outerMap);
            model.addObject("Question number",quesId);
            model.addObject("Question Answer",Qans);
            model.addObject("Question Text",Q_Text);
           
			 model.setViewName("record");
			 // hibernate function to fect questions from tQB with that string
			 
			
		}
		return model;

	}
	public ModelAndView showData(String que_id, int test_id) {
		ModelAndView mv = new ModelAndView();
		List<te_ques_bank> ques_bank = this.wetuserservice.getdata(que_id);
	
		@SuppressWarnings("unchecked")
		List<wet_user_response> user_response = this.wetuserservice.maindata(test_id);
		
		//@SuppressWarnings("unused")
		String x = logic(ques_bank, user_response, que_id);
		return mv;
	}
	public String logic(List<te_ques_bank> ques_bank, List<wet_user_response> user_response, String ques_id) {
		Assign_Q =new HashMap<Integer, Integer>();
		Attept_Q =new HashMap<Integer, Integer>();
		correct_Q =new HashMap<Integer, Integer>();
		wrong_Q =new HashMap<Integer, Integer>();
		Q_Text = new HashMap<Integer , String>();
		Not_Attempt = new HashMap<Integer, Integer>();
		outerMap=new HashMap<Integer, HashMap<String, Integer>>();

		for (te_ques_bank DATA : ques_bank) {
			quesId.add(DATA.getSno());
			Qans.add(DATA.getAns1());
			Q_Text.put(DATA.getSno(),DATA.getQtext());
			DATA.getTopic();
			DATA.getMark();
			
		}
         
		for (wet_user_response user : user_response) {
			String qnoo = user.getRQNO();
			String uans = user.getUANS();
			String ans= user.getEmail();
				
			String[] User_Question_number_string = qnoo.replaceAll("\\[", "").replaceAll(" ", "").replaceAll("]", "")
					.split(",");
	
			String[] User_Answer = uans.replaceAll("\\[", "").replaceAll("]", "").split(",");

			// declaring an array with the size of string
			int[] User_Question_number_int = new int[User_Question_number_string.length];
                
			// parsing the String argument as a signed decimal integer object and
			// storing that integer into the array
			for (int i = 0; i < User_Question_number_string.length; i++) {

				User_Question_number_int[i] = Integer.parseInt(User_Question_number_string[i]);

			}
			for (int i = 0; i < User_Question_number_int.length; i++) {

				int indexOfQuestion = quesId.indexOf(User_Question_number_int[i]);
				
				int AssignQuestion= (Assign_Q.containsKey(User_Question_number_int[i])?Assign_Q.get(User_Question_number_int[i]):0);
				Assign_Q.put(User_Question_number_int[i], AssignQuestion+1);
				
				if (!User_Answer[i].trim().equals("")) {
			  int count = (Attept_Q.containsKey(User_Question_number_int[i])? Attept_Q.get(User_Question_number_int[i])	: 0);
			  Attept_Q.put(User_Question_number_int[i], count + 1);
			  
			  
			  
			  
				  if(!outerMap.containsKey(User_Question_number_int[i])) {
						  innerMap = new HashMap<String, Integer>();
						  innerMap.put("a", 0);
						  innerMap.put("b", 0);
						  innerMap.put("c", 0);
						  innerMap.put("d", 0);
						  innerMap.put("e", 0);
						  innerMap.put("f", 0);
						  innerMap.put("g", 0);
						  innerMap.put(User_Answer[i].trim(), 1);
						//  System.out.println(User_Question_number_int[i]+" :"+innerMap);
					  outerMap.put(User_Question_number_int[i], innerMap);
				
   					  }else
					  {
   						
   						innerMap = new HashMap<String, Integer>();
   						  innerMap=outerMap.get(User_Question_number_int[i]);
   						  int storeAns =(innerMap.containsKey(User_Answer[i].trim()))?innerMap.get(User_Answer[i].trim()):0; 
   						  innerMap.put(User_Answer[i].trim(),  ++storeAns);
						  outerMap.put(User_Question_number_int[i], innerMap);
					  }
					  
				
					  if (User_Answer[i].trim().equals(Qans.get(indexOfQuestion))) {
						int print = (correct_Q.containsKey(User_Question_number_int[i])
								? correct_Q.get(User_Question_number_int[i])
								: 0);
						correct_Q.put(User_Question_number_int[i], print + 1);

					} else {
						if(!correct_Q.containsKey(User_Question_number_int[i]))
						{
							correct_Q.put(User_Question_number_int[i], 0);
						}
						int print = (wrong_Q.containsKey(User_Question_number_int[i])
								? wrong_Q.get(User_Question_number_int[i])
								: 0);
						wrong_Q.put(User_Question_number_int[i], print+1);
					     
					}
					 
				} 
				else {
					int print1 = (Not_Attempt.containsKey(User_Question_number_int[i])
							? Not_Attempt.get(User_Question_number_int[i])
							: 0);
					Not_Attempt.put(User_Question_number_int[i], print1 + 1);
				}
			
			}
			
		       
		}
		System.out.println(correct_Q);
		System.out.println(wrong_Q);
     
        for(int i=0;i<quesId.size();i++){
        	 if(!Assign_Q.containsKey(quesId.get(i))){
        	 Assign_Q.put(quesId.get(i),0);
        	 Attept_Q.put(quesId.get(i),0);
        	 correct_Q.put(quesId.get(i),0);
        	 wrong_Q.put(quesId.get(i),0);
        	 Not_Attempt.put(quesId.get(i),0);
        }
      	 
        }
		return "";
		 
	}
	
    @RequestMapping(path = "/Download")
	public void downloadFromExcel(HttpServletResponse response,HttpServletRequest request) throws IOException
	{
    	//creating file name
    	response.setContentType("application/octet-stream");
    	DateFormat dateformatter =new SimpleDateFormat("yyyy-MM-dd_HH:mm:ss");
    	String currentDateTime = dateformatter.format(new Date());
    	String headerKey="Content-Disposition";
    	 String headerValue = "attachment; filename=questions_" + currentDateTime + ".xlsx";
    	response.setHeader(headerKey, headerValue);
    	System.out.println("Excel downloading...");
    	Data_import_to_excel dataImport=new Data_import_to_excel(quesId,Qans,Q_Text,Attept_Q,correct_Q,wrong_Q,Not_Attempt,Assign_Q,outerMap);
    	dataImport.export(response);
    	
	}
}
